#+title: Custom arch based distribution

* Base installation
** Basic setup
#+begin_src bash :tangle base-installation.sh
#!/bin/bash
clear
echo "#############################
This is KV's arch installation script
#############################"

sed -i "s/^#ParallelDownloads = 5$/ParallelDownloads = 5/" /etc/pacman.conf

pacman --noconfirm -Sy archlinux-keyring
loadkeys us
timedatectl set-ntp true
#+end_src
** Partitioning and mounting drives
A good partitioning scheme is as follows:
| Mount point | Partition | Partition type        | Size of partition |
| ----------- | --------- | --------------------- | ----------------- |
| /mnt/boot   | /dev/sda1 | EFI syste partition   | 512 MB            |
| [SWAP]      | /dev/sda2 | Linux swap            | 2x RAM            |
| /mnt        | /dev/sda3 | Linux x86_64 root (/) | Rest of device    |

#+begin_src bash :tangle base-installation.sh
clear
lsblk
echo -e "\n\n\n"
read -p "Enter the drive (e.g. /dev/sda or /dev/nvme0n1): " drive
cfdisk $drive

clear
lsblk
echo -e "\n\n\n"
read -p "Enter the root partition (e.g. /dev/sda3 or /dev/nvme0n1p3): " partition
mkfs.ext4 $partition
mount $partition /mnt

read -p "Create efi partition? [y/n]" efianswer
if [[ $efianswer = y ]] ; then
  lsblk
  read -p "Enter EFI partition (e.g. /dev/sda1 or /dev/nvme0n1p1): " efipartition
  mkfs.fat -F 32 $efipartition
  mount --mkdir $efipartition /mnt/boot
fi

read -p "Create swap partition? [y/n]" swpanswer
if [[ $swpanswer = y ]] ; then
  lsblk
  read -p "Enter EFI partition (e.g. /dev/sda2 or /dev/nvme0n1p2): " swap_partition
  mkswap $swap_partition
  swapon $swap_partition
fi
#+end_src

** Installing base system
Installing
 - base linux system
 - doas for root access
 - nvim text editor
 - a network manager
 - git
#+begin_src bash :tangle base-installation.sh
clear
pacstrap /mnt base linux linux-firmware linux-headers opendoas neovim networkmanager git

clear ; echo -e "\n\n\n Generating fstab \n\n\n"
genfstab -U /mnt >> /mnt/etc/fstab

echo -e "\n\n\n copying configuration script \n\n\n"
cp dotfile-setup.sh configuration-script.sh /mnt/

echo "Now mount arch-chroot $partition and run configuration script"
#+end_src
* Configuring the system
This should be run after chrooting into the arch system
** Time zone, Localization and Network configuration
#+begin_src bash :tangle configuration-script.sh
#!/bin/bash
ln -sf /usr/share/zoneinfo/Asia/Kolkata /etc/localtime
hwclock --systohc
echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
locale-gen
echo "LANG=en_US.UTF-8" > /etc/locale.conf
echo "KEYMAP=us" > /etc/vconsole.conf
read -p "Hostname: " hostname
echo $hostname > /etc/hostname
echo "127.0.0.1       localhost" >> /etc/hosts
echo "::1             localhost" >> /etc/hosts
echo "127.0.1.1       $hostname.localdomain $hostname" >> /etc/hosts
#+end_src
** Users and passwords
#+begin_src bash :tangle configuration-script.sh
passwd

read -p "Enter a username: " username
useradd -m -G audio,video,storage,optical,wheel -s /usr/bin/zsh $username
passwd $username
echo "permit persist :wheel as root" >> /etc/doas.conf

#+end_src

** Grub configuration and startup daemons
#+begin_src bash :tangle configuration-script.sh
pacman --noconfirm -S sed
sed -i "s/^#ParallelDownloads = 5$/ParallelDownloads = 5/" /etc/pacman.conf

pacman --noconfirm -S grub efibootmgr os-prober
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=myArch
grub-mkconfig -o /boot/grub/grub.cfg

systemctl enable NetworkManager.service

mv dotfile-setup.sh /home/$username

echo "Now you can exit out of the chrooted environment. Unmount the drives mounted in /mnt and reboot."
#+end_src
* dotfiles setup
#+begin_src bash :tangle dotfiles-setup.sh
#!/bin/bash
#+end_src
